mod x86_64 {
    pub const SYS_NOSYS: i64 = 0; // { int nosys(void); } syscall nosys_args int
    pub const SYS_EXIT: i64 = 1; // { void sys_exit(int rval); } exit \
    pub const SYS_FORK: i64 = 2; // { int fork(void); }
    pub const SYS_READ: i64 = 3; // { ssize_t read(int fd, void *buf, \
    pub const SYS_WRITE: i64 = 4; // { ssize_t write(int fd, const void *buf, \
    pub const SYS_OPEN: i64 = 5; // { int open(char *path, int flags, int mode); }
    pub const SYS_CLOSE: i64 = 6; // { int close(int fd); }
    pub const SYS_WAIT4: i64 = 7; // { int wait4(int pid, int *status, \
    pub const SYS_LINK: i64 = 9; // { int link(char *path, char *link); }
    pub const SYS_UNLINK: i64 = 10; // { int unlink(char *path); }
    pub const SYS_CHDIR: i64 = 12; // { int chdir(char *path); }
    pub const SYS_FCHDIR: i64 = 13; // { int fchdir(int fd); }
    pub const SYS_MKNOD: i64 = 14; // { int mknod(char *path, int mode, int dev); }
    pub const SYS_CHMOD: i64 = 15; // { int chmod(char *path, int mode); }
    pub const SYS_CHOWN: i64 = 16; // { int chown(char *path, int uid, int gid); }
    pub const SYS_OBREAK: i64 = 17; // { int obreak(char *nsize); } break \
    pub const SYS_GETPID: i64 = 20; // { pid_t getpid(void); }
    pub const SYS_MOUNT: i64 = 21; // { int mount(char *type, char *path, \
    pub const SYS_UNMOUNT: i64 = 22; // { int unmount(char *path, int flags); }
    pub const SYS_SETUID: i64 = 23; // { int setuid(uid_t uid); }
    pub const SYS_GETUID: i64 = 24; // { uid_t getuid(void); }
    pub const SYS_GETEUID: i64 = 25; // { uid_t geteuid(void); }
    pub const SYS_PTRACE: i64 = 26; // { int ptrace(int req, pid_t pid, \
    pub const SYS_RECVMSG: i64 = 27; // { int recvmsg(int s, struct msghdr *msg, \
    pub const SYS_SENDMSG: i64 = 28; // { int sendmsg(int s, struct msghdr *msg, \
    pub const SYS_RECVFROM: i64 = 29; // { int recvfrom(int s, caddr_t buf, \
    pub const SYS_ACCEPT: i64 = 30; // { int accept(int s, \
    pub const SYS_GETPEERNAME: i64 = 31; // { int getpeername(int fdes, \
    pub const SYS_GETSOCKNAME: i64 = 32; // { int getsockname(int fdes, \
    pub const SYS_ACCESS: i64 = 33; // { int access(char *path, int amode); }
    pub const SYS_CHFLAGS: i64 = 34; // { int chflags(const char *path, u_long flags); }
    pub const SYS_FCHFLAGS: i64 = 35; // { int fchflags(int fd, u_long flags); }
    pub const SYS_SYNC: i64 = 36; // { int sync(void); }
    pub const SYS_KILL: i64 = 37; // { int kill(int pid, int signum); }
    pub const SYS_GETPPID: i64 = 39; // { pid_t getppid(void); }
    pub const SYS_DUP: i64 = 41; // { int dup(u_int fd); }
    pub const SYS_PIPE: i64 = 42; // { int pipe(void); }
    pub const SYS_GETEGID: i64 = 43; // { gid_t getegid(void); }
    pub const SYS_PROFIL: i64 = 44; // { int profil(caddr_t samples, size_t size, \
    pub const SYS_KTRACE: i64 = 45; // { int ktrace(const char *fname, int ops, \
    pub const SYS_GETGID: i64 = 47; // { gid_t getgid(void); }
    pub const SYS_GETLOGIN: i64 = 49; // { int getlogin(char *namebuf, u_int \
    pub const SYS_SETLOGIN: i64 = 50; // { int setlogin(char *namebuf); }
    pub const SYS_ACCT: i64 = 51; // { int acct(char *path); }
    pub const SYS_SIGALTSTACK: i64 = 53; // { int sigaltstack(stack_t *ss, \
    pub const SYS_IOCTL: i64 = 54; // { int ioctl(int fd, u_long com, \
    pub const SYS_REBOOT: i64 = 55; // { int reboot(int opt); }
    pub const SYS_REVOKE: i64 = 56; // { int revoke(char *path); }
    pub const SYS_SYMLINK: i64 = 57; // { int symlink(char *path, char *link); }
    pub const SYS_READLINK: i64 = 58; // { ssize_t readlink(char *path, char *buf, \
    pub const SYS_EXECVE: i64 = 59; // { int execve(char *fname, char **argv, \
    pub const SYS_UMASK: i64 = 60; // { int umask(int newmask); } umask umask_args \
    pub const SYS_CHROOT: i64 = 61; // { int chroot(char *path); }
    pub const SYS_MSYNC: i64 = 65; // { int msync(void *addr, size_t len, \
    pub const SYS_VFORK: i64 = 66; // { int vfork(void); }
    pub const SYS_SBRK: i64 = 69; // { int sbrk(int incr); }
    pub const SYS_SSTK: i64 = 70; // { int sstk(int incr); }
    pub const SYS_OVADVISE: i64 = 72; // { int ovadvise(int anom); } vadvise \
    pub const SYS_MUNMAP: i64 = 73; // { int munmap(void *addr, size_t len); }
    pub const SYS_MPROTECT: i64 = 74; // { int mprotect(const void *addr, size_t len, \
    pub const SYS_MADVISE: i64 = 75; // { int madvise(void *addr, size_t len, \
    pub const SYS_MINCORE: i64 = 78; // { int mincore(const void *addr, size_t len, \
    pub const SYS_GETGROUPS: i64 = 79; // { int getgroups(u_int gidsetsize, \
    pub const SYS_SETGROUPS: i64 = 80; // { int setgroups(u_int gidsetsize, \
    pub const SYS_GETPGRP: i64 = 81; // { int getpgrp(void); }
    pub const SYS_SETPGID: i64 = 82; // { int setpgid(int pid, int pgid); }
    pub const SYS_SETITIMER: i64 = 83; // { int setitimer(u_int which, struct \
    pub const SYS_SWAPON: i64 = 85; // { int swapon(char *name); }
    pub const SYS_GETITIMER: i64 = 86; // { int getitimer(u_int which, \
    pub const SYS_GETDTABLESIZE: i64 = 89; // { int getdtablesize(void); }
    pub const SYS_DUP2: i64 = 90; // { int dup2(u_int from, u_int to); }
    pub const SYS_FCNTL: i64 = 92; // { int fcntl(int fd, int cmd, long arg); }
    pub const SYS_SELECT: i64 = 93; // { int select(int nd, fd_set *in, fd_set *ou, \
    pub const SYS_FSYNC: i64 = 95; // { int fsync(int fd); }
    pub const SYS_SETPRIORITY: i64 = 96; // { int setpriority(int which, int who, \
    pub const SYS_SOCKET: i64 = 97; // { int socket(int domain, int type, \
    pub const SYS_CONNECT: i64 = 98; // { int connect(int s, caddr_t name, \
    pub const SYS_GETPRIORITY: i64 = 100; // { int getpriority(int which, int who); }
    pub const SYS_BIND: i64 = 104; // { int bind(int s, caddr_t name, \
    pub const SYS_SETSOCKOPT: i64 = 105; // { int setsockopt(int s, int level, int name, \
    pub const SYS_LISTEN: i64 = 106; // { int listen(int s, int backlog); }
    pub const SYS_GETTIMEOFDAY: i64 = 116; // { int gettimeofday(struct timeval *tp, \
    pub const SYS_GETRUSAGE: i64 = 117; // { int getrusage(int who, \
    pub const SYS_GETSOCKOPT: i64 = 118; // { int getsockopt(int s, int level, int name, \
    pub const SYS_READV: i64 = 120; // { int readv(int fd, struct iovec *iovp, \
    pub const SYS_WRITEV: i64 = 121; // { int writev(int fd, struct iovec *iovp, \
    pub const SYS_SETTIMEOFDAY: i64 = 122; // { int settimeofday(struct timeval *tv, \
    pub const SYS_FCHOWN: i64 = 123; // { int fchown(int fd, int uid, int gid); }
    pub const SYS_FCHMOD: i64 = 124; // { int fchmod(int fd, int mode); }
    pub const SYS_SETREUID: i64 = 126; // { int setreuid(int ruid, int euid); }
    pub const SYS_SETREGID: i64 = 127; // { int setregid(int rgid, int egid); }
    pub const SYS_RENAME: i64 = 128; // { int rename(char *from, char *to); }
    pub const SYS_FLOCK: i64 = 131; // { int flock(int fd, int how); }
    pub const SYS_MKFIFO: i64 = 132; // { int mkfifo(char *path, int mode); }
    pub const SYS_SENDTO: i64 = 133; // { int sendto(int s, caddr_t buf, size_t len, \
    pub const SYS_SHUTDOWN: i64 = 134; // { int shutdown(int s, int how); }
    pub const SYS_SOCKETPAIR: i64 = 135; // { int socketpair(int domain, int type, \
    pub const SYS_MKDIR: i64 = 136; // { int mkdir(char *path, int mode); }
    pub const SYS_RMDIR: i64 = 137; // { int rmdir(char *path); }
    pub const SYS_UTIMES: i64 = 138; // { int utimes(char *path, \
    pub const SYS_ADJTIME: i64 = 140; // { int adjtime(struct timeval *delta, \
    pub const SYS_SETSID: i64 = 147; // { int setsid(void); }
    pub const SYS_QUOTACTL: i64 = 148; // { int quotactl(char *path, int cmd, int uid, \
    pub const SYS_LGETFH: i64 = 160; // { int lgetfh(char *fname, \
    pub const SYS_GETFH: i64 = 161; // { int getfh(char *fname, \
    pub const SYS_SYSARCH: i64 = 165; // { int sysarch(int op, char *parms); }
    pub const SYS_RTPRIO: i64 = 166; // { int rtprio(int function, pid_t pid, \
    pub const SYS_FREEBSD6_PREAD: i64 = 173; // { ssize_t freebsd6_pread(int fd, void *buf, \
    pub const SYS_FREEBSD6_PWRITE: i64 = 174; // { ssize_t freebsd6_pwrite(int fd, \
    pub const SYS_SETFIB: i64 = 175; // { int setfib(int fibnum); }
    pub const SYS_NTP_ADJTIME: i64 = 176; // { int ntp_adjtime(struct timex *tp); }
    pub const SYS_SETGID: i64 = 181; // { int setgid(gid_t gid); }
    pub const SYS_SETEGID: i64 = 182; // { int setegid(gid_t egid); }
    pub const SYS_SETEUID: i64 = 183; // { int seteuid(uid_t euid); }
    pub const SYS_PATHCONF: i64 = 191; // { int pathconf(char *path, int name); }
    pub const SYS_FPATHCONF: i64 = 192; // { int fpathconf(int fd, int name); }
    pub const SYS_GETRLIMIT: i64 = 194; // { int getrlimit(u_int which, \
    pub const SYS_SETRLIMIT: i64 = 195; // { int setrlimit(u_int which, \
    pub const SYS_FREEBSD6_MMAP: i64 = 197; // { caddr_t freebsd6_mmap(caddr_t addr, \
    pub const SYS_FREEBSD6_LSEEK: i64 = 199; // { off_t freebsd6_lseek(int fd, int pad, \
    pub const SYS_FREEBSD6_TRUNCATE: i64 = 200; // { int freebsd6_truncate(char *path, int pad, \
    pub const SYS_FREEBSD6_FTRUNCATE: i64 = 201; // { int freebsd6_ftruncate(int fd, int pad, \
    pub const SYS___SYSCTL: i64 = 202; // { int __sysctl(int *name, u_int namelen, \
    pub const SYS_MLOCK: i64 = 203; // { int mlock(const void *addr, size_t len); }
    pub const SYS_MUNLOCK: i64 = 204; // { int munlock(const void *addr, size_t len); }
    pub const SYS_UNDELETE: i64 = 205; // { int undelete(char *path); }
    pub const SYS_FUTIMES: i64 = 206; // { int futimes(int fd, struct timeval *tptr); }
    pub const SYS_GETPGID: i64 = 207; // { int getpgid(pid_t pid); }
    pub const SYS_POLL: i64 = 209; // { int poll(struct pollfd *fds, u_int nfds, \
    pub const SYS_CLOCK_GETTIME: i64 = 232; // { int clock_gettime(clockid_t clock_id, \
    pub const SYS_CLOCK_SETTIME: i64 = 233; // { int clock_settime( \
    pub const SYS_CLOCK_GETRES: i64 = 234; // { int clock_getres(clockid_t clock_id, \
    pub const SYS_KTIMER_CREATE: i64 = 235; // { int ktimer_create(clockid_t clock_id, \
    pub const SYS_KTIMER_DELETE: i64 = 236; // { int ktimer_delete(int timerid); }
    pub const SYS_KTIMER_SETTIME: i64 = 237; // { int ktimer_settime(int timerid, int flags, \
    pub const SYS_KTIMER_GETTIME: i64 = 238; // { int ktimer_gettime(int timerid, struct \
    pub const SYS_KTIMER_GETOVERRUN: i64 = 239; // { int ktimer_getoverrun(int timerid); }
    pub const SYS_NANOSLEEP: i64 = 240; // { int nanosleep(const struct timespec *rqtp, \
    pub const SYS_FFCLOCK_GETCOUNTER: i64 = 241; // { int ffclock_getcounter(ffcounter *ffcount); }
    pub const SYS_FFCLOCK_SETESTIMATE: i64 = 242; // { int ffclock_setestimate( \
    pub const SYS_FFCLOCK_GETESTIMATE: i64 = 243; // { int ffclock_getestimate( \
    pub const SYS_CLOCK_GETCPUCLOCKID2: i64 = 247; // { int clock_getcpuclockid2(id_t id,\
    pub const SYS_NTP_GETTIME: i64 = 248; // { int ntp_gettime(struct ntptimeval *ntvp); }
    pub const SYS_MINHERIT: i64 = 250; // { int minherit(void *addr, size_t len, \
    pub const SYS_RFORK: i64 = 251; // { int rfork(int flags); }
    pub const SYS_OPENBSD_POLL: i64 = 252; // { int openbsd_poll(struct pollfd *fds, \
    pub const SYS_ISSETUGID: i64 = 253; // { int issetugid(void); }
    pub const SYS_LCHOWN: i64 = 254; // { int lchown(char *path, int uid, int gid); }
    pub const SYS_GETDENTS: i64 = 272; // { int getdents(int fd, char *buf, \
    pub const SYS_LCHMOD: i64 = 274; // { int lchmod(char *path, mode_t mode); }
    pub const SYS_LUTIMES: i64 = 276; // { int lutimes(char *path, \
    pub const SYS_NSTAT: i64 = 278; // { int nstat(char *path, struct nstat *ub); }
    pub const SYS_NFSTAT: i64 = 279; // { int nfstat(int fd, struct nstat *sb); }
    pub const SYS_NLSTAT: i64 = 280; // { int nlstat(char *path, struct nstat *ub); }
    pub const SYS_PREADV: i64 = 289; // { ssize_t preadv(int fd, struct iovec *iovp, \
    pub const SYS_PWRITEV: i64 = 290; // { ssize_t pwritev(int fd, struct iovec *iovp, \
    pub const SYS_FHOPEN: i64 = 298; // { int fhopen(const struct fhandle *u_fhp, \
    pub const SYS_FHSTAT: i64 = 299; // { int fhstat(const struct fhandle *u_fhp, \
    pub const SYS_MODNEXT: i64 = 300; // { int modnext(int modid); }
    pub const SYS_MODSTAT: i64 = 301; // { int modstat(int modid, \
    pub const SYS_MODFNEXT: i64 = 302; // { int modfnext(int modid); }
    pub const SYS_MODFIND: i64 = 303; // { int modfind(const char *name); }
    pub const SYS_KLDLOAD: i64 = 304; // { int kldload(const char *file); }
    pub const SYS_KLDUNLOAD: i64 = 305; // { int kldunload(int fileid); }
    pub const SYS_KLDFIND: i64 = 306; // { int kldfind(const char *file); }
    pub const SYS_KLDNEXT: i64 = 307; // { int kldnext(int fileid); }
    pub const SYS_KLDSTAT: i64 = 308; // { int kldstat(int fileid, struct \
    pub const SYS_KLDFIRSTMOD: i64 = 309; // { int kldfirstmod(int fileid); }
    pub const SYS_GETSID: i64 = 310; // { int getsid(pid_t pid); }
    pub const SYS_SETRESUID: i64 = 311; // { int setresuid(uid_t ruid, uid_t euid, \
    pub const SYS_SETRESGID: i64 = 312; // { int setresgid(gid_t rgid, gid_t egid, \
    pub const SYS_YIELD: i64 = 321; // { int yield(void); }
    pub const SYS_MLOCKALL: i64 = 324; // { int mlockall(int how); }
    pub const SYS_MUNLOCKALL: i64 = 325; // { int munlockall(void); }
    pub const SYS___GETCWD: i64 = 326; // { int __getcwd(u_char *buf, u_int buflen); }
    pub const SYS_SCHED_SETPARAM: i64 = 327; // { int sched_setparam (pid_t pid, \
    pub const SYS_SCHED_GETPARAM: i64 = 328; // { int sched_getparam (pid_t pid, struct \
    pub const SYS_SCHED_SETSCHEDULER: i64 = 329; // { int sched_setscheduler (pid_t pid, int \
    pub const SYS_SCHED_GETSCHEDULER: i64 = 330; // { int sched_getscheduler (pid_t pid); }
    pub const SYS_SCHED_YIELD: i64 = 331; // { int sched_yield (void); }
    pub const SYS_SCHED_GET_PRIORITY_MAX: i64 = 332; // { int sched_get_priority_max (int policy); }
    pub const SYS_SCHED_GET_PRIORITY_MIN: i64 = 333; // { int sched_get_priority_min (int policy); }
    pub const SYS_SCHED_RR_GET_INTERVAL: i64 = 334; // { int sched_rr_get_interval (pid_t pid, \
    pub const SYS_UTRACE: i64 = 335; // { int utrace(const void *addr, size_t len); }
    pub const SYS_KLDSYM: i64 = 337; // { int kldsym(int fileid, int cmd, \
    pub const SYS_JAIL: i64 = 338; // { int jail(struct jail *jail); }
    pub const SYS_SIGPROCMASK: i64 = 340; // { int sigprocmask(int how, \
    pub const SYS_SIGSUSPEND: i64 = 341; // { int sigsuspend(const sigset_t *sigmask); }
    pub const SYS_SIGPENDING: i64 = 343; // { int sigpending(sigset_t *set); }
    pub const SYS_SIGTIMEDWAIT: i64 = 345; // { int sigtimedwait(const sigset_t *set, \
    pub const SYS_SIGWAITINFO: i64 = 346; // { int sigwaitinfo(const sigset_t *set, \
    pub const SYS___ACL_GET_FILE: i64 = 347; // { int __acl_get_file(const char *path, \
    pub const SYS___ACL_SET_FILE: i64 = 348; // { int __acl_set_file(const char *path, \
    pub const SYS___ACL_GET_FD: i64 = 349; // { int __acl_get_fd(int filedes, \
    pub const SYS___ACL_SET_FD: i64 = 350; // { int __acl_set_fd(int filedes, \
    pub const SYS___ACL_DELETE_FILE: i64 = 351; // { int __acl_delete_file(const char *path, \
    pub const SYS___ACL_DELETE_FD: i64 = 352; // { int __acl_delete_fd(int filedes, \
    pub const SYS___ACL_ACLCHECK_FILE: i64 = 353; // { int __acl_aclcheck_file(const char *path, \
    pub const SYS___ACL_ACLCHECK_FD: i64 = 354; // { int __acl_aclcheck_fd(int filedes, \
    pub const SYS_EXTATTRCTL: i64 = 355; // { int extattrctl(const char *path, int cmd, \
    pub const SYS_EXTATTR_SET_FILE: i64 = 356; // { ssize_t extattr_set_file( \
    pub const SYS_EXTATTR_GET_FILE: i64 = 357; // { ssize_t extattr_get_file( \
    pub const SYS_EXTATTR_DELETE_FILE: i64 = 358; // { int extattr_delete_file(const char *path, \
    pub const SYS_GETRESUID: i64 = 360; // { int getresuid(uid_t *ruid, uid_t *euid, \
    pub const SYS_GETRESGID: i64 = 361; // { int getresgid(gid_t *rgid, gid_t *egid, \
    pub const SYS_KQUEUE: i64 = 362; // { int kqueue(void); }
    pub const SYS_KEVENT: i64 = 363; // { int kevent(int fd, \
    pub const SYS_EXTATTR_SET_FD: i64 = 371; // { ssize_t extattr_set_fd(int fd, \
    pub const SYS_EXTATTR_GET_FD: i64 = 372; // { ssize_t extattr_get_fd(int fd, \
    pub const SYS_EXTATTR_DELETE_FD: i64 = 373; // { int extattr_delete_fd(int fd, \
    pub const SYS___SETUGID: i64 = 374; // { int __setugid(int flag); }
    pub const SYS_EACCESS: i64 = 376; // { int eaccess(char *path, int amode); }
    pub const SYS_NMOUNT: i64 = 378; // { int nmount(struct iovec *iovp, \
    pub const SYS___MAC_GET_PROC: i64 = 384; // { int __mac_get_proc(struct mac *mac_p); }
    pub const SYS___MAC_SET_PROC: i64 = 385; // { int __mac_set_proc(struct mac *mac_p); }
    pub const SYS___MAC_GET_FD: i64 = 386; // { int __mac_get_fd(int fd, \
    pub const SYS___MAC_GET_FILE: i64 = 387; // { int __mac_get_file(const char *path_p, \
    pub const SYS___MAC_SET_FD: i64 = 388; // { int __mac_set_fd(int fd, \
    pub const SYS___MAC_SET_FILE: i64 = 389; // { int __mac_set_file(const char *path_p, \
    pub const SYS_KENV: i64 = 390; // { int kenv(int what, const char *name, \
    pub const SYS_LCHFLAGS: i64 = 391; // { int lchflags(const char *path, \
    pub const SYS_UUIDGEN: i64 = 392; // { int uuidgen(struct uuid *store, \
    pub const SYS_SENDFILE: i64 = 393; // { int sendfile(int fd, int s, off_t offset, \
    pub const SYS_MAC_SYSCALL: i64 = 394; // { int mac_syscall(const char *policy, \
    pub const SYS_FHSTATFS: i64 = 398; // { int fhstatfs(const struct fhandle *u_fhp, \
    pub const SYS___MAC_GET_PID: i64 = 409; // { int __mac_get_pid(pid_t pid, \
    pub const SYS___MAC_GET_LINK: i64 = 410; // { int __mac_get_link(const char *path_p, \
    pub const SYS___MAC_SET_LINK: i64 = 411; // { int __mac_set_link(const char *path_p, \
    pub const SYS_EXTATTR_SET_LINK: i64 = 412; // { ssize_t extattr_set_link( \
    pub const SYS_EXTATTR_GET_LINK: i64 = 413; // { ssize_t extattr_get_link( \
    pub const SYS_EXTATTR_DELETE_LINK: i64 = 414; // { int extattr_delete_link( \
    pub const SYS___MAC_EXECVE: i64 = 415; // { int __mac_execve(char *fname, char **argv, \
    pub const SYS_SIGACTION: i64 = 416; // { int sigaction(int sig, \
    pub const SYS_SIGRETURN: i64 = 417; // { int sigreturn( \
    pub const SYS_GETCONTEXT: i64 = 421; // { int getcontext(struct __ucontext *ucp); }
    pub const SYS_SETCONTEXT: i64 = 422; // { int setcontext( \
    pub const SYS_SWAPCONTEXT: i64 = 423; // { int swapcontext(struct __ucontext *oucp, \
    pub const SYS_SWAPOFF: i64 = 424; // { int swapoff(const char *name); }
    pub const SYS___ACL_GET_LINK: i64 = 425; // { int __acl_get_link(const char *path, \
    pub const SYS___ACL_SET_LINK: i64 = 426; // { int __acl_set_link(const char *path, \
    pub const SYS___ACL_DELETE_LINK: i64 = 427; // { int __acl_delete_link(const char *path, \
    pub const SYS___ACL_ACLCHECK_LINK: i64 = 428; // { int __acl_aclcheck_link(const char *path, \
    pub const SYS_SIGWAIT: i64 = 429; // { int sigwait(const sigset_t *set, \
    pub const SYS_THR_CREATE: i64 = 430; // { int thr_create(ucontext_t *ctx, long *id, \
    pub const SYS_THR_EXIT: i64 = 431; // { void thr_exit(long *state); }
    pub const SYS_THR_SELF: i64 = 432; // { int thr_self(long *id); }
    pub const SYS_THR_KILL: i64 = 433; // { int thr_kill(long id, int sig); }
    pub const SYS__UMTX_LOCK: i64 = 434; // { int _umtx_lock(struct umtx *umtx); }
    pub const SYS__UMTX_UNLOCK: i64 = 435; // { int _umtx_unlock(struct umtx *umtx); }
    pub const SYS_JAIL_ATTACH: i64 = 436; // { int jail_attach(int jid); }
    pub const SYS_EXTATTR_LIST_FD: i64 = 437; // { ssize_t extattr_list_fd(int fd, \
    pub const SYS_EXTATTR_LIST_FILE: i64 = 438; // { ssize_t extattr_list_file( \
    pub const SYS_EXTATTR_LIST_LINK: i64 = 439; // { ssize_t extattr_list_link( \
    pub const SYS_THR_SUSPEND: i64 = 442; // { int thr_suspend( \
    pub const SYS_THR_WAKE: i64 = 443; // { int thr_wake(long id); }
    pub const SYS_KLDUNLOADF: i64 = 444; // { int kldunloadf(int fileid, int flags); }
    pub const SYS_AUDIT: i64 = 445; // { int audit(const void *record, \
    pub const SYS_AUDITON: i64 = 446; // { int auditon(int cmd, void *data, \
    pub const SYS_GETAUID: i64 = 447; // { int getauid(uid_t *auid); }
    pub const SYS_SETAUID: i64 = 448; // { int setauid(uid_t *auid); }
    pub const SYS_GETAUDIT: i64 = 449; // { int getaudit(struct auditinfo *auditinfo); }
    pub const SYS_SETAUDIT: i64 = 450; // { int setaudit(struct auditinfo *auditinfo); }
    pub const SYS_GETAUDIT_ADDR: i64 = 451; // { int getaudit_addr( \
    pub const SYS_SETAUDIT_ADDR: i64 = 452; // { int setaudit_addr( \
    pub const SYS_AUDITCTL: i64 = 453; // { int auditctl(char *path); }
    pub const SYS__UMTX_OP: i64 = 454; // { int _umtx_op(void *obj, int op, \
    pub const SYS_THR_NEW: i64 = 455; // { int thr_new(struct thr_param *param, \
    pub const SYS_SIGQUEUE: i64 = 456; // { int sigqueue(pid_t pid, int signum, void *value); }
    pub const SYS_ABORT2: i64 = 463; // { int abort2(const char *why, int nargs, void **args); }
    pub const SYS_THR_SET_NAME: i64 = 464; // { int thr_set_name(long id, const char *name); }
    pub const SYS_RTPRIO_THREAD: i64 = 466; // { int rtprio_thread(int function, \
    pub const SYS_SCTP_PEELOFF: i64 = 471; // { int sctp_peeloff(int sd, uint32_t name); }
    pub const SYS_SCTP_GENERIC_SENDMSG: i64 = 472; // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, \
    pub const SYS_SCTP_GENERIC_SENDMSG_IOV: i64 = 473; // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, \
    pub const SYS_SCTP_GENERIC_RECVMSG: i64 = 474; // { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, \
    pub const SYS_PREAD: i64 = 475; // { ssize_t pread(int fd, void *buf, \
    pub const SYS_PWRITE: i64 = 476; // { ssize_t pwrite(int fd, const void *buf, \
    pub const SYS_MMAP: i64 = 477; // { caddr_t mmap(caddr_t addr, size_t len, \
    pub const SYS_LSEEK: i64 = 478; // { off_t lseek(int fd, off_t offset, \
    pub const SYS_TRUNCATE: i64 = 479; // { int truncate(char *path, off_t length); }
    pub const SYS_FTRUNCATE: i64 = 480; // { int ftruncate(int fd, off_t length); }
    pub const SYS_THR_KILL2: i64 = 481; // { int thr_kill2(pid_t pid, long id, int sig); }
    pub const SYS_SHM_OPEN: i64 = 482; // { int shm_open(const char *path, int flags, \
    pub const SYS_SHM_UNLINK: i64 = 483; // { int shm_unlink(const char *path); }
    pub const SYS_CPUSET: i64 = 484; // { int cpuset(cpusetid_t *setid); }
    pub const SYS_CPUSET_SETID: i64 = 485; // { int cpuset_setid(cpuwhich_t which, id_t id, \
    pub const SYS_CPUSET_GETID: i64 = 486; // { int cpuset_getid(cpulevel_t level, \
    pub const SYS_CPUSET_GETAFFINITY: i64 = 487; // { int cpuset_getaffinity(cpulevel_t level, \
    pub const SYS_CPUSET_SETAFFINITY: i64 = 488; // { int cpuset_setaffinity(cpulevel_t level, \
    pub const SYS_FACCESSAT: i64 = 489; // { int faccessat(int fd, char *path, int amode, \
    pub const SYS_FCHMODAT: i64 = 490; // { int fchmodat(int fd, char *path, mode_t mode, \
    pub const SYS_FCHOWNAT: i64 = 491; // { int fchownat(int fd, char *path, uid_t uid, \
    pub const SYS_FEXECVE: i64 = 492; // { int fexecve(int fd, char **argv, \
    pub const SYS_FUTIMESAT: i64 = 494; // { int futimesat(int fd, char *path, \
    pub const SYS_LINKAT: i64 = 495; // { int linkat(int fd1, char *path1, int fd2, \
    pub const SYS_MKDIRAT: i64 = 496; // { int mkdirat(int fd, char *path, mode_t mode); }
    pub const SYS_MKFIFOAT: i64 = 497; // { int mkfifoat(int fd, char *path, mode_t mode); }
    pub const SYS_OPENAT: i64 = 499; // { int openat(int fd, char *path, int flag, \
    pub const SYS_READLINKAT: i64 = 500; // { int readlinkat(int fd, char *path, char *buf, \
    pub const SYS_RENAMEAT: i64 = 501; // { int renameat(int oldfd, char *old, int newfd, \
    pub const SYS_SYMLINKAT: i64 = 502; // { int symlinkat(char *path1, int fd, \
    pub const SYS_UNLINKAT: i64 = 503; // { int unlinkat(int fd, char *path, int flag); }
    pub const SYS_POSIX_OPENPT: i64 = 504; // { int posix_openpt(int flags); }
    pub const SYS_JAIL_GET: i64 = 506; // { int jail_get(struct iovec *iovp, \
    pub const SYS_JAIL_SET: i64 = 507; // { int jail_set(struct iovec *iovp, \
    pub const SYS_JAIL_REMOVE: i64 = 508; // { int jail_remove(int jid); }
    pub const SYS_CLOSEFROM: i64 = 509; // { int closefrom(int lowfd); }
    pub const SYS_LPATHCONF: i64 = 513; // { int lpathconf(char *path, int name); }
    pub const SYS_CAP_NEW: i64 = 514; // { int cap_new(int fd, uint64_t rights); }
    pub const SYS_CAP_GETRIGHTS: i64 = 515; // { int cap_getrights(int fd, \
    pub const SYS_CAP_ENTER: i64 = 516; // { int cap_enter(void); }
    pub const SYS_CAP_GETMODE: i64 = 517; // { int cap_getmode(u_int *modep); }
    pub const SYS_PDFORK: i64 = 518; // { int pdfork(int *fdp, int flags); }
    pub const SYS_PDKILL: i64 = 519; // { int pdkill(int fd, int signum); }
    pub const SYS_PDGETPID: i64 = 520; // { int pdgetpid(int fd, pid_t *pidp); }
    pub const SYS_PSELECT: i64 = 522; // { int pselect(int nd, fd_set *in, \
    pub const SYS_GETLOGINCLASS: i64 = 523; // { int getloginclass(char *namebuf, \
    pub const SYS_SETLOGINCLASS: i64 = 524; // { int setloginclass(const char *namebuf); }
    pub const SYS_RCTL_GET_RACCT: i64 = 525; // { int rctl_get_racct(const void *inbufp, \
    pub const SYS_RCTL_GET_RULES: i64 = 526; // { int rctl_get_rules(const void *inbufp, \
    pub const SYS_RCTL_GET_LIMITS: i64 = 527; // { int rctl_get_limits(const void *inbufp, \
    pub const SYS_RCTL_ADD_RULE: i64 = 528; // { int rctl_add_rule(const void *inbufp, \
    pub const SYS_RCTL_REMOVE_RULE: i64 = 529; // { int rctl_remove_rule(const void *inbufp, \
    pub const SYS_POSIX_FALLOCATE: i64 = 530; // { int posix_fallocate(int fd, \
    pub const SYS_POSIX_FADVISE: i64 = 531; // { int posix_fadvise(int fd, off_t offset, \
    pub const SYS_WAIT6: i64 = 532; // { int wait6(idtype_t idtype, id_t id, \
    pub const SYS_BINDAT: i64 = 538; // { int bindat(int fd, int s, caddr_t name, \
    pub const SYS_CONNECTAT: i64 = 539; // { int connectat(int fd, int s, caddr_t name, \
    pub const SYS_CHFLAGSAT: i64 = 540; // { int chflagsat(int fd, const char *path, \
    pub const SYS_ACCEPT4: i64 = 541; // { int accept4(int s, \
    pub const SYS_PIPE2: i64 = 542; // { int pipe2(int *fildes, int flags); }
    pub const SYS_PROCCTL: i64 = 544; // { int procctl(idtype_t idtype, id_t id, \
    pub const SYS_UTIMENSAT: i64 = 547; // { int utimensat(int fd, \
    pub const SYS_FSTAT: i64 = 551; // { int fstat(int fd, _Out_ struct stat *sb); }
    pub const SYS_FSTATAT: i64 = 552; // { int fstatat(int fd, _In_z_ char *path, \
    pub const SYS_GETDIRENTRIES: i64 = 554; // { ssize_t getdirentries(int fd, \
    pub const SYS_STATFS: i64 = 555; // { int statfs(_In_z_ char *path, \
    pub const SYS_FSTATFS: i64 = 556; // { int fstatfs(int fd, \
    pub const SYS_GETFSSTAT: i64 = 557; // { int getfsstat( \
    pub const SYS_MKNODAT: i64 = 559; // { int mknodat(int fd, _In_z_ char *path, \
}
#[cfg(target_arch = "x86_64")]
pub use x86_64::*;
